import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@RestController
public class FileDownloadController {

    private static final String FILE_DIRECTORY = "path/to/your/files"; // Change this to your actual file directory

    @GetMapping("/download/{fileName}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName) throws IOException {
        // Construct the file path
        String filePath = FILE_DIRECTORY + File.separator + fileName;
        Path path = Paths.get(filePath);
        
        // Load the file as a Resource
        Resource resource = new org.springframework.core.io.UrlResource(path.toUri());

        if (resource.exists()) {
            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);

            // Delete the file after download
            Files.deleteIfExists(path);

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(resource.contentLength())
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(resource);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

public void unzipBlobFile(String blobName) throws IOException {
        String connectionString = "DefaultEndpointsProtocol=https;AccountName=your-storage-account-name;AccountKey=your-storage-account-key;EndpointSuffix=core.windows.net";
        
        BlobServiceClientBuilder builder = new BlobServiceClientBuilder().connectionString(connectionString);
        BlobContainerClient containerClient = builder.containerClient(containerName);
        BlobClient blobClient = containerClient.getBlobClient(blobName);

        byte[] zipData = blobClient.downloadContent().readAllBytes();
        ByteArrayInputStream zipInputStream = new ByteArrayInputStream(zipData);

        try (ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(zipInputStream)) {
            ArchiveEntry entry;
            while ((entry = zipArchiveInputStream.getNextEntry()) != null) {
                if (!entry.isDirectory()) {
                    String entryName = entry.getName();
                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = zipArchiveInputStream.read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }
                    byte[] extractedData = outputStream.toByteArray();
                    // Do something with extractedData (e.g., store it or process it)
                }
            }
        }
    }
}
Create an Endpoint to Trigger the Unzip:

Create an endpoint in your controller to trigger the unzip operation. For example:

java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RestController
@RequestMapping("/api")
public class BlobUnzipController {

    @Autowired
    private BlobUnzipService blobUnzipService;

    @GetMapping("/unzip/{blobName}")
    public String unzipBlob(@PathVariable String blobName) throws IOException {
        blobUnzipService.unzipBlobFile(blobName);
        return "File unzipped successfully!";
    }
}

}


import org.springframework.batch.core.ItemWriteListener;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.core.repository.dao.DefaultExecutionContextSerializer;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@Scope("step")
public class CustomItemWriter implements ItemWriter<MyItem> {

    private DefaultExecutionContextSerializer serializer;

    public CustomItemWriter(DefaultExecutionContextSerializer serializer) {
        this.serializer = serializer;
    }

    @Override
    public void write(List<? extends MyItem> items) throws Exception {
        // Access the ExecutionContext
        StepExecution stepExecution = serializer.getStepExecution();
        ExecutionContext executionContext = stepExecution.getExecutionContext();

        // Store data in the ExecutionContext
        executionContext.put("myDataKey", "Some data to be stored");

        // Retrieve data from the ExecutionContext
        String myData = (String) executionContext.get("myDataKey");

        // Your custom write logic here
        // ...
    }
}
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.repository.dao.DefaultExecutionContextSerializer;

@Configuration
@EnableBatchProcessing
public class JobConfiguration {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    private DefaultExecutionContextSerializer defaultExecutionContextSerializer;

    @Bean
    public Step customStep() {
        return stepBuilderFactory.get("customStep")
                .<MyItem, MyItem>chunk(10)
                .reader(customReader())
                .writer(customItemWriter())
                .build();
    }

    @Bean
    public Job customJob(Step customStep) {
        return jobBuilderFactory.get("customJob")
                .start(customStep)
                .build();
    }

    @Bean
    public CustomItemWriter customItemWriter() {
        return new CustomItemWriter(defaultExecutionContextSerializer);
    }
}
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.batch.core.repository.dao.AbstractJdbcBatchMetadataDao;
import org.springframework.batch.core.repository.dao.DefaultExecutionContextSerializer;
import org.springframework.batch.core.repository.dao.Jackson2ExecutionContextStringSerializer;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

    @Bean
    public Jackson2ExecutionContextStringSerializer jacksonExecutionContextSerializer() {
        return new Jackson2ExecutionContextStringSerializer();
    }

    @Bean
    public DefaultExecutionContextSerializer defaultExecutionContextSerializer(
            Jackson2ExecutionContextStringSerializer jacksonSerializer) {
        DefaultExecutionContextSerializer serializer = new DefaultExecutionContextSerializer();
        serializer.setJacksonSerializer(jacksonSerializer);
        return serializer;
    }
}

# Set your Azure AD (Active Directory) tenant ID, client ID, and redirect URI
TENANT_ID="your-tenant-id"
CLIENT_ID="your-client-id"
REDIRECT_URI="your-redirect-uri"

# Set the Microsoft Identity platform authorization endpoint
AUTHORIZATION_ENDPOINT="https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/authorize"

# Set the token endpoint
TOKEN_ENDPOINT="https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token"

# Set the scope for the ID token (openid profile email)
SCOPE="openid%20profile%20email"

# Set the response type to obtain an ID token
RESPONSE_TYPE="id_token"

# Set a unique nonce (a random string) to mitigate replay attacks
NONCE="your-unique-nonce"

# Set the curl command to initiate the authorization flow
curl -X GET "$AUTHORIZATION_ENDPOINT?client_id=$CLIENT_ID&response_type=$RESPONSE_TYPE&redirect_uri=$REDIRECT_URI&scope=$SCOPE&nonce=$NONCE"

# After user authentication, you will receive a code parameter in the redirect URI

# Exchange the code for an ID token using the token endpoint
CODE="the-obtained-code"

# Set the client secret (if applicable)
CLIENT_SECRET="your-client-secret"

# Set the grant type to authorization code
GRANT_TYPE="authorization_code"

# Set the curl command to exchange the code for an ID token
curl -X POST "$TOKEN_ENDPOINT" -d "client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&code=$CODE&redirect_uri=$REDIRECT_URI&grant_type=$GRANT_TYPE"






 @GetMapping("/downloadFile")
    public ResponseEntity<byte[]> downloadFile(@RequestParam String blobName) {
        if (blobName == null || blobName.isEmpty()) {
            return ResponseEntity.badRequest().body(null);
        }

        try {
            // Build the blob client
            BlobClient blobClient = new BlobClientBuilder()
                    .connectionString(BLOB_CONNECTION_STRING)
                    .containerName(CONTAINER_NAME)
                    .blobName(blobName)
                    .buildClient();

            // Check if blob exists
            if (!blobClient.exists()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
            }

            // Download the blob content into a byte array
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            blobClient.download(outputStream);

            // Prepare headers for file download
            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + blobName + "\"");
            headers.add(HttpHeaders.CONTENT_TYPE, "application/octet-stream");

            return new ResponseEntity<>(outputStream.toByteArray(), headers, HttpStatus.OK);
        } catch (Exception e) {
            // Handle errors and send appropriate response
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
import com.azure.storage.blob.*;
import com.azure.storage.blob.models.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;

import java.io.*;
import java.util.concurrent.*;

@Controller
@RequestMapping("/api/blob")
public class AzureBlobDownloaderController {

    private static final int CHUNK_SIZE = 4 * 1024 * 1024; // 4 MB per chunk

    @GetMapping("/download")
    public ResponseEntity<InputStreamResource> downloadBlob(@RequestParam String connectionString,
                                                             @RequestParam String containerName,
                                                             @RequestParam String blobName) {
        try {
            BlobServiceClient blobServiceClient = new BlobServiceClientBuilder().connectionString(connectionString).buildClient();
            BlobContainerClient containerClient = blobServiceClient.getBlobContainerClient(containerName);
            BlobClient blobClient = containerClient.getBlobClient(blobName);

            PipedInputStream pipedInputStream = new PipedInputStream();
            PipedOutputStream pipedOutputStream = new PipedOutputStream(pipedInputStream);

            ExecutorService executorService = Executors.newSingleThreadExecutor();
            executorService.submit(() -> {
                try (OutputStream outputStream = pipedOutputStream) {
                    long blobSize = blobClient.getProperties().getBlobSize();
                    long numChunks = (blobSize + CHUNK_SIZE - 1) / CHUNK_SIZE;

                    for (long i = 0; i < numChunks; i++) {
                        long offset = i * CHUNK_SIZE;
                        long chunkSize = Math.min(CHUNK_SIZE, blobSize - offset);

                        BlobRange range = new BlobRange(offset, chunkSize);
                        blobClient.downloadStream(outputStream, range, null, null, false);
                    }
                } catch (IOException e) {
                    System.err.println("Error streaming blob: " + e.getMessage());
                }
            });

            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + blobName + "\"");
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(blobClient.getProperties().getBlobSize())
                    .body(new InputStreamResource(pipedInputStream));
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(null);
        }
    }
}


