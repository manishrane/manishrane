import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@RestController
public class FileDownloadController {

    private static final String FILE_DIRECTORY = "path/to/your/files"; // Change this to your actual file directory

    @GetMapping("/download/{fileName}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName) throws IOException {
        // Construct the file path
        String filePath = FILE_DIRECTORY + File.separator + fileName;
        Path path = Paths.get(filePath);
        
        // Load the file as a Resource
        Resource resource = new org.springframework.core.io.UrlResource(path.toUri());

        if (resource.exists()) {
            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);

            // Delete the file after download
            Files.deleteIfExists(path);

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(resource.contentLength())
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(resource);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

public void unzipBlobFile(String blobName) throws IOException {
        String connectionString = "DefaultEndpointsProtocol=https;AccountName=your-storage-account-name;AccountKey=your-storage-account-key;EndpointSuffix=core.windows.net";
        
        BlobServiceClientBuilder builder = new BlobServiceClientBuilder().connectionString(connectionString);
        BlobContainerClient containerClient = builder.containerClient(containerName);
        BlobClient blobClient = containerClient.getBlobClient(blobName);

        byte[] zipData = blobClient.downloadContent().readAllBytes();
        ByteArrayInputStream zipInputStream = new ByteArrayInputStream(zipData);

        try (ZipArchiveInputStream zipArchiveInputStream = new ZipArchiveInputStream(zipInputStream)) {
            ArchiveEntry entry;
            while ((entry = zipArchiveInputStream.getNextEntry()) != null) {
                if (!entry.isDirectory()) {
                    String entryName = entry.getName();
                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = zipArchiveInputStream.read(buffer)) != -1) {
                        outputStream.write(buffer, 0, bytesRead);
                    }
                    byte[] extractedData = outputStream.toByteArray();
                    // Do something with extractedData (e.g., store it or process it)
                }
            }
        }
    }
}
Create an Endpoint to Trigger the Unzip:

Create an endpoint in your controller to trigger the unzip operation. For example:

java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RestController
@RequestMapping("/api")
public class BlobUnzipController {

    @Autowired
    private BlobUnzipService blobUnzipService;

    @GetMapping("/unzip/{blobName}")
    public String unzipBlob(@PathVariable String blobName) throws IOException {
        blobUnzipService.unzipBlobFile(blobName);
        return "File unzipped successfully!";
    }
}

}
