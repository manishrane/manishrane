import com.azure.storage.blob.BlobContainerClient;
import com.azure.storage.blob.BlobServiceClientBuilder;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.OutputStream;

@SpringBootApplication
public class AzureBlobDownloadApplication {

    public static void main(String[] args) {
        SpringApplication.run(AzureBlobDownloadApplication.class, args);
    }

    @RestController
    public class BlobDownloadController {

        @GetMapping("/downloadBlob")
        public void downloadBlob(HttpServletResponse response) {
            String connectionString = "your_connection_string_here";
            String containerName = "your_container_name_here";
            String blobName = "your_blob_name_here";

            BlobContainerClient containerClient = new BlobServiceClientBuilder()
                    .connectionString(connectionString)
                    .buildClient()
                    .getBlobContainerClient(containerName);

            try {
                response.setHeader("Content-Disposition", "attachment; filename=" + blobName);
                response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);

                OutputStream outputStream = response.getOutputStream();
                containerClient.getBlobClient(blobName)
                        .openQueryOptions().setDownloadStreaming(true)
                        .download(outputStream);

                outputStream.flush();
            } catch (IOException e) {
                System.err.println("Error streaming blob: " + e.getMessage());
            }
        }
    }
}
